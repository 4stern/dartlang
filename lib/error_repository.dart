library analysis.errors;

import 'dart:async';

import 'impl/analysis_server_gen.dart' show AnalysisErrors, AnalysisError;

/// Repository of errors generated by `analysis.errors` events
///
/// One-stop shop for getting the status of errors the analyzer has reported.
/// Source agonostic.
class ErrorRepository {
  /// A collection of all known errors that the analysis_server has provided us,
  /// organized by filename.
  final Map<String, List<AnalysisError>> knownErrors = {};
  // TODO: stream a delta object like dart-tools ErrorRepository does.
  Stream onChange;

  StreamController _controller = new StreamController.broadcast();
  Stream<AnalysisErrors> _errorStream;

  ErrorRepository(this._errorStream) {
    _errorStream.listen(_handleErrors);
    onChange = _controller.stream;
  }

  void _handleErrors(AnalysisErrors analysisErrors) {
    knownErrors[analysisErrors.file] = analysisErrors.errors;
    _controller.add(null);
  }
}
